\n {
  curr_lineno  = curr_lineno+1;
}


"/*" {
  NOT_COMMENT = 0;
}

"*/" {
  NOT_COMMENT = 1;
}

={2} {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return (EQUAL);
}

= {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return ('=');
}

\+ {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return ('+');
}

- {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return ('-');
}

\* {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return ('*');
}

% {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return ('%');
}

>= {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return (GE);
}

> {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return ('>');
}

\| {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return ('|');
}

; {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return (';');
}

, {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return (',');
}

\{ {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return ('{');
}

\} {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return ('}');
}

\( {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return ('(');
}

\) {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return (')');
}

if {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return (IF);
}

while {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return (WHILE);
}

func {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return (FUNC);
}

return {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return (RETURN);
}

[`\"][0-9a-zA-Z\\t\n\0 ]*[`\"] {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return (CONST_STRING);
}

0[xX][0-9a-fA-F]+ {
  long num=0;
  yytext += 2;
  while(*yytext!='\0') {
    num = num*16;
    if (*yytext>='0' && *yytext<='9' ) num+=(*yytext-48);
    else if (*yytext>='a' && *yytext<='f') num+=(*yytext-87);
    else if (*yytext>='A' && *yytext<='F') num+=(*yytext-55);
    yytext += 1;
  }
  seal_yylval.symbol = inttable.add_int(num); 
	return (CONST_INT);
}

[0-9]+ {
  seal_yylval.symbol = inttable.add_string(yytext); 
	return (CONST_INT);
  }

[0-9]+\.[0-9]+ {
  seal_yylval.symbol = floattable.add_string(yytext); 
	return (CONST_FLOAT);
  }


var {
  if (NOT_COMMENT==1) {
    seal_yylval.symbol = stringtable.add_string(yytext); 
    return (VAR);
  }
}

Int {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return (TYPEID);
}

Float {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return (TYPEID);
}

String {
  seal_yylval.symbol = stringtable.add_string(yytext); 
	return (TYPEID);
}

true {
  seal_yylval.boolean = 1;
	return (CONST_BOOL);
}

false {
  seal_yylval.boolean = 0;
	return (CONST_BOOL);
}

[a-z][a-zA-Z0-9_]*  {
  if (NOT_COMMENT==1){
    seal_yylval.symbol = stringtable.add_string(yytext); 
	return (OBJECTID);
  }
}

[A-Z0-9][a-z0-9A-Z]* {
  if (NOT_COMMENT==1){
    strcpy(seal_yylval.error_msg, yytext); 
	  return (ERROR); 
  }
  
}

. {}
